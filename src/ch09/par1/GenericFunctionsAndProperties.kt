package ch09.par1

/*
* Объявление параметризованной функции:
* после fun указываются типовые параметры
* которые затем могут быть использованы в типе-приёмнике, аргументах функции, возвращаемом значении, теле функции.
* Типовые параметры можно объявлять для методов классов/интерфейсов, функций верхнего уровня, функций-расширений,
* функций высшего порядка.
* */
// public fun <T> List<T>.slice(indices: IntRange): List<T>

fun sliceDemo() {
    val letters = ('a'..'z').toList()
    // при вызове функции можно явно передать её типовые аргументы.
    println(letters.slice<Char>(0..2))
    // но чаще всего это не требуется: их можно вывести из контекста.
    println(letters.slice(10..13))
}

/*
* С помощью такого же синтаксиса можно объявить обобщённые свойства-расширения (обычные свойства класса / верхнего
* уровня - нельзя сделать обобщёнными)
* */
val <T> List<T>.penultimate: T
    get() = this[size - 2]

fun main() {
    sliceDemo()

    println(listOf(1, 2, 3, 4).penultimate) // 3
}
