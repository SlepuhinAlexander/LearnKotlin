package ch08.par2

import java.util.concurrent.locks.Lock


/*
* Лямбда-выражения обычно компилируются в анонимные классы: создаётся экземпляр этого класса; если лямбда-выражение
* захватывает какие-то переменные, то для каждого вызова создаётся новый объект.
* Но в kotlin есть возможность избежать таких накладных расходов: встраиваемые (inline) функции
* */

/*
* когда функция объявляется с модификатором inline, её тело становится встраиваемым: оно подставляется вместо обычного
* вызова функции.
* */
inline fun <T> synchronized(lock: Lock, action: () -> T): T {
    lock.lock()
    try {
        return action()
    } finally {
        lock.unlock()
    }
}

fun foo(l: Lock) {
    println("Before sync")
    synchronized(l) { println("Action") }
    println("After sync")
}

/*
* компилятор сделает из этого использования inline функции synchronized байт код аналогичный компиляции функции foo1
*
* встраивается не только код функции synchronized, но и код лямбда-выражений, использованных в ней.
* В результате лямбда-выражение не заключается в анонимный класс, реализующий некий интерфейс функции.
* */
fun foo1(l: Lock) {
    println("Before sync")

    l.lock()
    try {
        println("Action")
    } finally {
        l.unlock()
    }
    println("After sync")
}

// встраиваемые функции так же можно передавать как аргумент-функцию:
class LockOwner(val lock: Lock) {
    fun runUnderLock(body: () -> Unit) {
        synchronized(lock, body)
    }

    /*
    * в этом случае код лямбда-выражения недоступен в точке вызова, поэтому будет встроена только функция synchronized
    * а лямбда-выражение при использовании LockOwner.runUnderLock будет вызвано как обычно:
    * эквивалентный код:
    * */
    fun runUnderLock1(body: () -> Unit) {
        lock.lock()
        try {
            body() // лямбда-выражение не встраивается.
        } finally {
            lock.unlock()
        }
    }
}

/*
* Если функция-параметр используется (вызывается) внутри функции высшего порядка, то её код легко можно встроить в
* точку вызова.
* Но если функция-параметр сохраняется где-то для последующего использования, код лямбда-выражения невозможно встроить.
* В общем случае параметр можно встроить, если его вызывают непосредственно или передают как аргумент другой
* встраиваемой функции.
* Тогда функцию высшего порядка можно объявить встраиваемой, иначе компилятор запретит встраивание параметра.
* */

// При необходимости, функцию-параметр можно объявить не-встраиваемой:
inline fun foo(inlined: () -> Unit, noinline notInlined: () -> Unit) {
}
